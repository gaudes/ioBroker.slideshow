{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.0.1\r\n */\r\n\r\n//#region Imports, Variables and Global\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { GlobalHelper } from \"./modules/global-helper\";\r\nimport * as slideBing from \"./modules/slideBing\";\r\nimport * as slideLocal from \"./modules/slideLocal\";\r\nimport * as slideFS from \"./modules/slideFS\";\r\nimport * as slideSyno from \"./modules/slideSynology\"\r\nimport * as nominatim from \"./modules/nominatim\"\r\n\r\nlet Helper: GlobalHelper;\r\nconst MsgErrUnknown = \"Unknown Error\";\r\nlet UpdateRunning = false;\r\nlet language = 'en';\r\nlet storedLocations: { [key: string]: nominatim.locationInfos } = {};\r\n\r\ninterface Picture {\r\n\turl: string;\r\n\tpath: string;\r\n\tinfo1: string;\r\n\tinfo2: string;\r\n\tinfo3: string;\r\n\tdate: Date | null;\r\n\tlatitude: number | null;\r\n\tlongitude: number | null;\r\n\tlocationInfos: nominatim.locationInfos | null;\r\n}\r\n\r\ninterface PictureListUpdateResult {\r\n\tsuccess: boolean;\r\n\tpicturecount: number;\r\n}\r\n\r\n//#endregion\r\n\r\nclass Slideshow extends utils.Adapter {\r\n\r\n\tisUnloaded: boolean;\r\n\r\n\t//#region Basic Adapter Functions\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"slideshow\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\r\n\t\tthis.isUnloaded = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// Init Helper\r\n\t\t\tvar sysConfig = await this.getForeignObjectAsync('system.config');\r\n\t\t\tif (sysConfig && sysConfig.common && sysConfig.common['language']) {\r\n\t\t\t\tlanguage = sysConfig.common['language']\r\n\t\t\t}\r\n\r\n\t\t\tHelper = new GlobalHelper(this, language);\r\n\r\n\t\t\t// Create button for updates\r\n\t\t\tawait this.setObjectNotExistsAsync(\"updatepicturelist\", {\r\n\t\t\t\ttype: \"state\",\r\n\t\t\t\tcommon: {\r\n\t\t\t\t\tname: \"updatepicturelist\",\r\n\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\trole: \"button\",\r\n\t\t\t\t\tread: true,\r\n\t\t\t\t\twrite: true,\r\n\t\t\t\t\tdesc: \"Update picture list\",\r\n\t\t\t\t\tdef: false\r\n\t\t\t\t},\r\n\t\t\t\tnative: {},\r\n\t\t\t});\r\n\t\t\tawait this.setStateAsync(\"updatepicturelist\", false, true);\r\n\t\t\tthis.subscribeStates(\"updatepicturelist\");\r\n\r\n\t\t\t// Starting updatePictureStoreTimer action\r\n\t\t\tawait this.updatePictureStoreTimer();\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"onReady\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n\t\tif (state) {\r\n\t\t\tif (id === `${this.namespace}.updatepicturelist` && state?.val === true && state?.ack === false) {\r\n\t\t\t\tif (UpdateRunning === true) {\r\n\t\t\t\t\tHelper.ReportingInfo(\"Info\", \"Adapter\", \"Update picture list already running\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tHelper.ReportingInfo(\"Info\", \"Adapter\", \"Updating picture list\");\r\n\t\t\t\t\tclearTimeout(this.tUpdateCurrentPictureTimeout);\r\n\t\t\t\t\tawait this.updatePictureStoreTimer();\r\n\t\t\t\t}\r\n\t\t\t\tawait this.setStateAsync(\"updatepicturelist\", false, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\tthis.isUnloaded = true;\r\n\t\t\tclearTimeout(this.tUpdateCurrentPictureTimeout);\r\n\t\t\tclearTimeout(this.tUpdatePictureStoreTimeout);\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region Timer and Action\r\n\r\n\tprivate tUpdatePictureStoreTimeout: any = null;\r\n\tprivate tUpdateCurrentPictureTimeout: any = null;\r\n\r\n\tprivate async updatePictureStoreTimer(): Promise<void> {\r\n\t\tUpdateRunning = true;\r\n\t\tstoredLocations = {};\r\n\r\n\t\tlet updatePictureStoreResult: PictureListUpdateResult = { success: false, picturecount: 0 };\r\n\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", \"UpdatePictureStoreTimer occured\");\r\n\t\ttry {\r\n\t\t\tthis.tUpdatePictureStoreTimeout && clearTimeout(this.tUpdatePictureStoreTimeout);\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updatePictureStoreTimer\", \"Clear Timer\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tswitch (this.config.provider) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tupdatePictureStoreResult = await slideBing.updatePictureList(Helper);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tupdatePictureStoreResult = await slideLocal.updatePictureList(Helper);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tupdatePictureStoreResult = await slideFS.updatePictureList(Helper);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tupdatePictureStoreResult = await slideSyno.updatePictureList(Helper);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updatePictureStoreTimer\", \"Call Timer Action\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (this.config.update_picture_list && this.config.update_picture_list > 0 && updatePictureStoreResult.success === true) {\r\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"updatePictureStoreTimer\", `Update every ${this.config.update_picture_list} hours, starting timer`);\r\n\t\t\t\tthis.tUpdatePictureStoreTimeout = setTimeout(() => {\r\n\t\t\t\t\tthis.updatePictureStoreTimer();\r\n\t\t\t\t}, (this.config.update_picture_list * 3600000)); // Update every configured hours if successfull\r\n\t\t\t} else if (updatePictureStoreResult.success === false) {\r\n\t\t\t\tthis.tUpdatePictureStoreTimeout = setTimeout(() => {\r\n\t\t\t\t\tthis.updatePictureStoreTimer();\r\n\t\t\t\t}, (this.config.update_interval * 300000)); // Update every minute if error\r\n\t\t\t}\r\n\t\t\tif (updatePictureStoreResult.success === true && updatePictureStoreResult.picturecount > 0 && this.isUnloaded === false) {\r\n\t\t\t\t// Save picturecount\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"picturecount\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"picturecount\",\r\n\t\t\t\t\t\ttype: \"number\",\r\n\t\t\t\t\t\trole: \"value\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Pictures found\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"picturecount\", { val: updatePictureStoreResult.picturecount, ack: true });\r\n\r\n\t\t\t\t// Starting updateCurrentPictureTimer action\r\n\t\t\t\tthis.updateCurrentPictureTimer();\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updatePictureStoreTimer\", \"Set Timer\");\r\n\t\t}\r\n\t\tUpdateRunning = false;\r\n\t}\r\n\r\n\tprivate async updateCurrentPictureTimer(): Promise<void> {\r\n\t\tlet CurrentPictureResult: Picture | null = null;\r\n\t\tlet Provider = \"\";\r\n\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", \"updateCurrentPictureTimer occured\");\r\n\t\ttry {\r\n\t\t\tthis.tUpdateCurrentPictureTimeout && clearTimeout(this.tUpdateCurrentPictureTimeout);\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Clear Timer\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tswitch (this.config.provider) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tCurrentPictureResult = await slideBing.getPicture(Helper);\r\n\t\t\t\t\tProvider = \"Bing\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tCurrentPictureResult = await slideLocal.getPicture(Helper);\r\n\t\t\t\t\tProvider = \"Local\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tCurrentPictureResult = await slideFS.getPicture(Helper);\r\n\t\t\t\t\tProvider = \"FileSystem\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tCurrentPictureResult = await slideSyno.getPicture(Helper);\r\n\t\t\t\t\tProvider = \"Synology\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Call Timer Action\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (CurrentPictureResult !== null && this.isUnloaded === false) {\r\n\t\t\t\tHelper.ReportingInfo(\"Debug\", Provider, `Set picture to ${CurrentPictureResult.path}`);\r\n\t\t\t\t// Set picture\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"picture\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"picture\",\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\trole: \"text\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Current picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"picture\", { val: CurrentPictureResult.url, ack: true });\r\n\t\t\t\t// Set info1\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"info1\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"info1\",\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\trole: \"text\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Info 1 for picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"info1\", { val: CurrentPictureResult.info1, ack: true });\r\n\t\t\t\t// Set info2\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"info2\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"info2\",\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\trole: \"text\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Info 2 for picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"info2\", { val: CurrentPictureResult.info2, ack: true });\r\n\t\t\t\t// Set info3\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"info3\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"info3\",\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\trole: \"text\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Info 3 for picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"info3\", { val: CurrentPictureResult.info3, ack: true });\r\n\t\t\t\t// Set date\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"date\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"date\",\r\n\t\t\t\t\t\ttype: \"number\",\r\n\t\t\t\t\t\trole: \"date\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Date of picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"date\", { val: CurrentPictureResult.date?.getTime() || null, ack: true });\r\n\t\t\t\t// Set latitude\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"latitude\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"latitude\",\r\n\t\t\t\t\t\ttype: \"number\",\r\n\t\t\t\t\t\trole: \"latitude\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Latitude of picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"latitude\", { val: CurrentPictureResult.latitude || null, ack: true });\r\n\t\t\t\t// Set longitude\r\n\t\t\t\tawait this.setObjectNotExistsAsync(\"longitude\", {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: \"longitude\",\r\n\t\t\t\t\t\ttype: \"number\",\r\n\t\t\t\t\t\trole: \"longitude\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\tdesc: \"Longitude of picture\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {},\r\n\t\t\t\t});\r\n\t\t\t\tawait this.setStateAsync(\"longitude\", { val: CurrentPictureResult.longitude || null, ack: true });\r\n\r\n\t\t\t\tawait this.setLocationStates(CurrentPictureResult);\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Call Timer Action\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tthis.tUpdateCurrentPictureTimeout = setTimeout(() => {\r\n\t\t\t\tthis.updateCurrentPictureTimer();\r\n\t\t\t}, (this.config.update_interval * 1000));\r\n\t\t} catch (err) {\r\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Set Timer\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async setLocationStates(CurrentPictureResult: Picture): Promise<void> {\r\n\t\ttry {\r\n\t\t\tif (this.config.downloadLocationData) {\r\n\t\t\t\tif (CurrentPictureResult && CurrentPictureResult.latitude !== null && CurrentPictureResult.longitude !== null) {\r\n\t\t\t\t\tif (!await this.getObjectAsync(\"location\")) {\r\n\t\t\t\t\t\tawait this.createChannelAsync(\"\", \"location\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tawait this.setObjectNotExistsAsync(\"location.country\", {\r\n\t\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\t\tname: \"country\",\r\n\t\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\t\trole: \"country\",\r\n\t\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\t\tdesc: \"Country of picture\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnative: {},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tawait this.setObjectNotExistsAsync(\"location.state\", {\r\n\t\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\t\tname: \"state\",\r\n\t\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\t\trole: \"state\",\r\n\t\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\t\tdesc: \"State of picture\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnative: {},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tawait this.setObjectNotExistsAsync(\"location.county\", {\r\n\t\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\t\tname: \"county\",\r\n\t\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\t\trole: \"county\",\r\n\t\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\t\tdesc: \"County of picture\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnative: {},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tawait this.setObjectNotExistsAsync(\"location.city\", {\r\n\t\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\t\tname: \"city\",\r\n\t\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\t\trole: \"city\",\r\n\t\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\t\tdesc: \"City of picture\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnative: {},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tawait this.setObjectNotExistsAsync(\"location.display_name\", {\r\n\t\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\t\tname: \"display_name\",\r\n\t\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\t\trole: \"display_name\",\r\n\t\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\t\tdesc: \"Full Infos of picture\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnative: {},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (storedLocations && CurrentPictureResult.path && storedLocations[CurrentPictureResult.path]) {\r\n\t\t\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", `[setLocationStates]: loading from cache (file: ${CurrentPictureResult.path}, data: ${JSON.stringify(storedLocations[CurrentPictureResult.path])}`);\r\n\r\n\t\t\t\t\t\tawait this.setStateAsync(\"location.country\", { val: storedLocations[CurrentPictureResult.path].country || \"\", ack: true });\r\n\t\t\t\t\t\tawait this.setStateAsync(\"location.state\", { val: storedLocations[CurrentPictureResult.path].state || \"\", ack: true });\r\n\t\t\t\t\t\tawait this.setStateAsync(\"location.county\", { val: storedLocations[CurrentPictureResult.path].county || \"\", ack: true });\r\n\t\t\t\t\t\tawait this.setStateAsync(\"location.city\", { val: storedLocations[CurrentPictureResult.path].city || \"\", ack: true });\r\n\t\t\t\t\t\tawait this.setStateAsync(\"location.display_name\", { val: storedLocations[CurrentPictureResult.path].display_name || \"\", ack: true });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst locationInfos = await nominatim.getLocationInfos(Helper, CurrentPictureResult.latitude, CurrentPictureResult.longitude);\r\n\r\n\t\t\t\t\t\tif (locationInfos && CurrentPictureResult.path) {\r\n\t\t\t\t\t\t\tstoredLocations[CurrentPictureResult.path] = locationInfos;\r\n\r\n\t\t\t\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", `[setLocationStates]: data downloaded (file: ${CurrentPictureResult.path}, data: ${JSON.stringify(storedLocations[CurrentPictureResult.path])}`);\r\n\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.country\", { val: locationInfos.country || \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.state\", { val: locationInfos.state || \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.county\", { val: locationInfos.county || \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.city\", { val: locationInfos.city || \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.display_name\", { val: locationInfos.display_name || \"\", ack: true });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tstoredLocations[CurrentPictureResult.path] = { country: \"\", state: \"\", county: \"\", city: \"\", display_name: \"\" };\r\n\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.country\", { val: \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.state\", { val: \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.county\", { val: \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.city\", { val: \"\", ack: true });\r\n\t\t\t\t\t\t\tawait this.setStateAsync(\"location.display_name\", { val: \"\", ack: true });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait this.setStateAsync(\"location.country\", { val: \"\", ack: true });\r\n\t\t\t\t\tawait this.setStateAsync(\"location.state\", { val: \"\", ack: true });\r\n\t\t\t\t\tawait this.setStateAsync(\"location.county\", { val: \"\", ack: true });\r\n\t\t\t\t\tawait this.setStateAsync(\"location.city\", { val: \"\", ack: true });\r\n\t\t\t\t\tawait this.setStateAsync(\"location.display_name\", { val: \"\", ack: true });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tHelper.ReportingError(error as Error, \"Unknown Error\", \"main\", \"setLocationStates\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nif (module.parent) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Slideshow(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Slideshow())();\r\n}"],
  "mappings": "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",
  "names": []
}
