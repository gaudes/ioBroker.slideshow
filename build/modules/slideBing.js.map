{
  "version": 3,
  "sources": ["../../src/modules/slideBing.ts"],
  "sourcesContent": ["import axios from \"axios\";\r\nimport { GlobalHelper } from \"./global-helper\"\r\nimport * as nominatim from \"./nominatim\"\r\n\r\ninterface BingJSONImage {\r\n\turl: string,\r\n\ttitle: string,\r\n\tcopyright: string,\r\n\tstartdate: string,\r\n\tany: string | boolean | number\r\n}\r\n\r\ninterface BingJSONImageList {\r\n\timages: BingJSONImage[],\r\n\tany: any\r\n}\r\n\r\nexport interface BingPicture {\r\n\tbingurl: string,\r\n\tpath: string,\r\n\turl: string,\r\n\tinfo1: string,\r\n\tinfo2: string,\r\n\tinfo3: string,\r\n\tdate: Date,\r\n\tlatitude: number | null,\r\n\tlongitude: number | null,\r\n\tlocationInfos: nominatim.locationInfos | null\r\n}\r\n\r\nexport interface BingPictureListUpdateResult {\r\n\tsuccess: boolean;\r\n\tpicturecount: number;\r\n}\r\n\r\nconst BingUrl = \"https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=10&mkt=de-DE\";\r\nlet BingPictureList: BingPicture[];\r\nlet CurrentImage: BingPicture;\r\n\r\nexport async function getPicture(Helper: GlobalHelper): Promise<BingPicture | null> {\r\n\ttry {\r\n\t\tif (BingPictureList.length === 0) {\r\n\t\t\tawait updatePictureList(Helper);\r\n\t\t}\r\n\t\tif (BingPictureList.length !== 0) {\r\n\t\t\tif (!CurrentImage) {\r\n\t\t\t\tCurrentImage = BingPictureList[0];\r\n\t\t\t} else {\r\n\t\t\t\tif (BingPictureList.indexOf(CurrentImage) === BingPictureList.length - 1) {\r\n\t\t\t\t\tCurrentImage = BingPictureList[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tCurrentImage = BingPictureList[BingPictureList.indexOf(CurrentImage) + 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn CurrentImage;\r\n\t\t}\r\n\t\treturn null;\r\n\t} catch (err) {\r\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Bing\", \"getPicture\");\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport async function updatePictureList(Helper: GlobalHelper): Promise<BingPictureListUpdateResult> {\r\n\t// Getting List from Bing.com\r\n\ttry {\r\n\t\tBingPictureList = [];\r\n\t\tconst WebResult = await axios.get(BingUrl);\r\n\t\tHelper.ReportingInfo(\"Debug\", \"Bing\", \"Picture list received\", { JSON: JSON.stringify(WebResult.data) });\r\n\t\t((WebResult.data) as BingJSONImageList).images.forEach(Image => {\r\n\t\t\tconst ImageDetails = Image.copyright.match(/(.*)\\s\\(\u00A9\\s(.*)\\)/);\r\n\t\t\tlet ImageDescription = \"\";\r\n\t\t\tlet ImageCopyright = \"\"\r\n\t\t\tif (ImageDetails) {\r\n\t\t\t\tImageDescription = ImageDetails[1];\r\n\t\t\t\tImageCopyright = ImageDetails[2];\r\n\t\t\t}\r\n\t\t\tconst ImageDate = new Date(parseInt(Image.startdate.substring(0, 4)), parseInt(Image.startdate.substring(4, 6)), parseInt(Image.startdate.substring(6, 8)));\r\n\t\t\tif (Array.isArray(BingPictureList)) {\r\n\t\t\t\tBingPictureList.push({ bingurl: \"https://bing.com\" + Image.url, url: \"\", path: \"\", info1: Image.title, info2: ImageDescription, info3: ImageCopyright, date: ImageDate, latitude: null, longitude: null, locationInfos: null });\r\n\t\t\t} else {\r\n\t\t\t\tBingPictureList = [{ bingurl: \"https://bing.com\" + Image.url, url: \"\", path: \"\", info1: Image.title, info2: ImageDescription, info3: ImageCopyright, date: ImageDate, latitude: null, longitude: null, locationInfos: null }];\r\n\t\t\t}\r\n\t\t});\r\n\t\tHelper.ReportingInfo(\"Debug\", \"Bing\", `Picture List from Bing: ${JSON.stringify(BingPictureList)}`, { JSON: JSON.stringify(BingPictureList.slice(0, 10)) });\r\n\t} catch (err) {\r\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Bing\", \"updatePictureList/List\");\r\n\t\treturn { success: false, picturecount: 0 };\r\n\t}\r\n\t// Saving list to files\r\n\ttry {\r\n\t\tfor (const CountElement in BingPictureList) {\r\n\t\t\tconst currentWebCall = await axios.get(BingPictureList[CountElement].bingurl, { responseType: \"arraybuffer\" });\r\n\t\t\tawait Helper.Adapter.writeFileAsync(Helper.Adapter.namespace, `bing/${CountElement}.jpg`, currentWebCall.data);\r\n\t\t\tBingPictureList[CountElement].url = `/${Helper.Adapter.namespace}/bing/${CountElement}.jpg`;\r\n\t\t\tBingPictureList[CountElement].path = BingPictureList[CountElement].url;\r\n\t\t}\r\n\t\tHelper.ReportingInfo(\"Info\", \"Bing\", `${BingPictureList.length} pictures downloaded from Bing`, { JSON: JSON.stringify(BingPictureList.slice(0, 10)) });\r\n\t\treturn { success: true, picturecount: BingPictureList.length };\r\n\t} catch (err) {\r\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Bing\", \"updatePictureList/Download\");\r\n\t\treturn { success: false, picturecount: 0 };\r\n\t}\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAmClB,MAAM,UAAU;AAChB,IAAI;AACJ,IAAI;AAEJ,0BAAiC,QAAmD;AACnF,MAAI;AACH,QAAI,gBAAgB,WAAW,GAAG;AACjC,YAAM,kBAAkB;AAAA;AAEzB,QAAI,gBAAgB,WAAW,GAAG;AACjC,UAAI,CAAC,cAAc;AAClB,uBAAe,gBAAgB;AAAA,aACzB;AACN,YAAI,gBAAgB,QAAQ,kBAAkB,gBAAgB,SAAS,GAAG;AACzE,yBAAe,gBAAgB;AAAA,eACzB;AACN,yBAAe,gBAAgB,gBAAgB,QAAQ,gBAAgB;AAAA;AAAA;AAGzE,aAAO;AAAA;AAER,WAAO;AAAA,WACC,KAAP;AACD,WAAO,eAAe,KAAc,iBAAiB,QAAQ;AAC7D,WAAO;AAAA;AAAA;AAIT,iCAAwC,QAA4D;AAEnG,MAAI;AACH,sBAAkB;AAClB,UAAM,YAAY,MAAM,qBAAM,IAAI;AAClC,WAAO,cAAc,SAAS,QAAQ,yBAAyB,EAAE,MAAM,KAAK,UAAU,UAAU;AAChG,IAAE,UAAU,KAA4B,OAAO,QAAQ,WAAS;AAC/D,YAAM,eAAe,MAAM,UAAU,MAAM;AAC3C,UAAI,mBAAmB;AACvB,UAAI,iBAAiB;AACrB,UAAI,cAAc;AACjB,2BAAmB,aAAa;AAChC,yBAAiB,aAAa;AAAA;AAE/B,YAAM,YAAY,IAAI,KAAK,SAAS,MAAM,UAAU,UAAU,GAAG,KAAK,SAAS,MAAM,UAAU,UAAU,GAAG,KAAK,SAAS,MAAM,UAAU,UAAU,GAAG;AACvJ,UAAI,MAAM,QAAQ,kBAAkB;AACnC,wBAAgB,KAAK,EAAE,SAAS,qBAAqB,MAAM,KAAK,KAAK,IAAI,MAAM,IAAI,OAAO,MAAM,OAAO,OAAO,kBAAkB,OAAO,gBAAgB,MAAM,WAAW,UAAU,MAAM,WAAW,MAAM,eAAe;AAAA,aAClN;AACN,0BAAkB,CAAC,EAAE,SAAS,qBAAqB,MAAM,KAAK,KAAK,IAAI,MAAM,IAAI,OAAO,MAAM,OAAO,OAAO,kBAAkB,OAAO,gBAAgB,MAAM,WAAW,UAAU,MAAM,WAAW,MAAM,eAAe;AAAA;AAAA;AAGxN,WAAO,cAAc,SAAS,QAAQ,2BAA2B,KAAK,UAAU,oBAAoB,EAAE,MAAM,KAAK,UAAU,gBAAgB,MAAM,GAAG;AAAA,WAC5I,KAAP;AACD,WAAO,eAAe,KAAc,iBAAiB,QAAQ;AAC7D,WAAO,EAAE,SAAS,OAAO,cAAc;AAAA;AAGxC,MAAI;AACH,eAAW,gBAAgB,iBAAiB;AAC3C,YAAM,iBAAiB,MAAM,qBAAM,IAAI,gBAAgB,cAAc,SAAS,EAAE,cAAc;AAC9F,YAAM,OAAO,QAAQ,eAAe,OAAO,QAAQ,WAAW,QAAQ,oBAAoB,eAAe;AACzG,sBAAgB,cAAc,MAAM,IAAI,OAAO,QAAQ,kBAAkB;AACzE,sBAAgB,cAAc,OAAO,gBAAgB,cAAc;AAAA;AAEpE,WAAO,cAAc,QAAQ,QAAQ,GAAG,gBAAgB,wCAAwC,EAAE,MAAM,KAAK,UAAU,gBAAgB,MAAM,GAAG;AAChJ,WAAO,EAAE,SAAS,MAAM,cAAc,gBAAgB;AAAA,WAC9C,KAAP;AACD,WAAO,eAAe,KAAc,iBAAiB,QAAQ;AAC7D,WAAO,EAAE,SAAS,OAAO,cAAc;AAAA;AAAA;",
  "names": []
}
