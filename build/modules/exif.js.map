{
  "version": 3,
  "sources": ["../../src/modules/exif.ts"],
  "sourcesContent": ["import * as exifr from \"exifr\";\r\nimport { GlobalHelper } from \"./global-helper\";\r\nimport { ExifImage } from \"exif\";\r\nimport moment from \"moment\";\r\nimport gpsCoordParser from \"coordinate-parser\";\r\n\r\n\r\nexport interface exifinfo {\r\n\tinfo1: string;\r\n\tinfo2: string;\r\n\tinfo3: string;\r\n\tdate: Date | null;\r\n\tlatitude: number | null;\r\n\tlongitude: number | null;\r\n}\r\n\r\nexport async function getPictureInformation(Helper: GlobalHelper, file: string | Buffer): Promise<exifinfo | null> {\r\n\ttry {\r\n\t\tlet PictureInfo = await exifr.parse(file, [\"XPTitle\", \"XPComment\", \"XPSubject\", \"DateTimeOriginal\", \"latitude\", \"longitude\"]);\r\n\t\tconst GpsInfo = await exifr.gps(file);\r\n\r\n\t\tif (!PictureInfo) {\r\n\t\t\t// Sometimes full data load is needed\t\t\r\n\t\t\tPictureInfo = await exifr.parse(file, true);\r\n\t\t}\r\n\r\n\t\tlet fallbackData = await getFallbackData(Helper, file, PictureInfo, GpsInfo);\r\n\r\n\t\treturn {\r\n\t\t\tinfo1: PictureInfo && PictureInfo[\"XPTitle\"] ? PictureInfo[\"XPTitle\"] : \"\",\r\n\t\t\tinfo2: PictureInfo && PictureInfo[\"XPSubject\"] ? PictureInfo[\"XPSubject\"] : \"\",\r\n\t\t\tinfo3: PictureInfo && PictureInfo[\"XPComment\"] ? PictureInfo[\"XPComment\"] : \"\",\r\n\t\t\tdate: PictureInfo && PictureInfo[\"DateTimeOriginal\"] ? new Date(PictureInfo[\"DateTimeOriginal\"]) : fallbackData.date,\r\n\t\t\tlatitude: GpsInfo && GpsInfo.latitude ? GpsInfo.latitude : fallbackData.latitude,\r\n\t\t\tlongitude: GpsInfo && GpsInfo.longitude ? GpsInfo.longitude : fallbackData.longitude\r\n\t\t};\r\n\t} catch (error) {\r\n\t\tHelper.ReportingError(error as Error, \"Unknown Error\", \"exifr\", \"getPictureInformation\");\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n//#region Fallback\r\nexport interface fallbackLib {\r\n\tdate: Date | null;\r\n\tlatitude: number | null;\r\n\tlongitude: number | null;\r\n}\r\n\r\nasync function getFallbackData(Helper: GlobalHelper, file: string | Buffer, PictureInfo: any, GpsInfo: any): Promise<fallbackLib> {\r\n\tlet fallbackDate = null;\r\n\tlet fallbackLatitude = null;\r\n\tlet fallbackLongitude = null;\r\n\r\n\tif (!PictureInfo || !PictureInfo[\"DateTimeOriginal\"] || !GpsInfo || !GpsInfo.latitude || !GpsInfo.longitude) {\r\n\t\tlet fallbackData = await getExifFallback(Helper, file);\r\n\r\n\t\tif (fallbackData) {\r\n\t\t\tif (!PictureInfo || !PictureInfo[\"DateTimeOriginal\"]) {\r\n\t\t\t\tif (fallbackData.exif && fallbackData.exif.DateTimeOriginal) {\r\n\t\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", `using fallback lib: file: '${file}', DateTimeOriginal: '${fallbackData.exif.DateTimeOriginal}'`);\r\n\t\t\t\t\tfallbackDate = fallbackData.exif && fallbackData.exif.DateTimeOriginal ? new Date(moment(fallbackData.exif.DateTimeOriginal, 'YYYY:MM:DD HH:mm:ss').toString()) : null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fallbackDate === null && fallbackData.gps && fallbackData.gps.GPSDateStamp) {\r\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", `using fallback lib: file: '${file}', GPSDateStamp: '${fallbackData.gps.GPSDateStamp}'`);\r\n\t\t\t\tfallbackDate = new Date(moment(fallbackData.gps.GPSDateStamp, 'YYYY:MM:DD').toString());\r\n\t\t\t}\r\n\r\n\t\t\tif (!GpsInfo || !GpsInfo.latitude || !GpsInfo.longitude) {\r\n\t\t\t\tif (fallbackData.gps && fallbackData.gps.GPSLatitudeRef && fallbackData.gps.GPSLatitude && fallbackData.gps.GPSLongitudeRef && fallbackData.gps.GPSLongitude) {\r\n\t\t\t\t\tlet latitudeTmp = `${fallbackData.gps.GPSLatitude[0]}:${fallbackData.gps.GPSLatitude[1]}:${fallbackData.gps.GPSLatitude[2]}${fallbackData.gps.GPSLatitudeRef}`\r\n\t\t\t\t\tlet longitudeTmp = `${fallbackData.gps.GPSLongitude[0]}:${fallbackData.gps.GPSLongitude[1]}:${fallbackData.gps.GPSLongitude[2]}${fallbackData.gps.GPSLongitudeRef}`\r\n\r\n\t\t\t\t\tlet coordTmp = `${latitudeTmp} ${longitudeTmp}`;\r\n\r\n\t\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", `using fallback lib: file: '${file}', Coordinates: '${coordTmp}'`);\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlet position = new gpsCoordParser(coordTmp);\r\n\r\n\t\t\t\t\t\tfallbackLatitude = position.getLatitude();\r\n\t\t\t\t\t\tfallbackLongitude = position.getLongitude();\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"gpsCoordParser\", \"getFallbackData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tdate: fallbackDate,\r\n\t\tlatitude: fallbackLatitude,\r\n\t\tlongitude: fallbackLongitude\r\n\t}\r\n}\r\n\r\nasync function getExifFallback(Helper: GlobalHelper, file: string | Buffer): Promise<any | null> {\r\n\treturn new Promise(resolve => {\r\n\t\tnew ExifImage(file, (error, data) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tif (error.message.includes(\"The Exif data is not valid\") || error.message.includes(\"No Exif segment found in the given image\")) {\r\n\t\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", `[getExifFallback]: ${error.message}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tHelper.ReportingError(error as Error, \"Unknown Error\", \"exif\", \"getExifFallback\");\r\n\t\t\t\t}\r\n\t\t\t\tresolve(null);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(data);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n//#endregion"],
  "mappings": "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",
  "names": []
}
