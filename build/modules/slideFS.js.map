{
  "version": 3,
  "sources": ["../../src/modules/slideFS.ts"],
  "sourcesContent": ["import { GlobalHelper } from \"./global-helper\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as imgsize from \"image-size\";\nimport { getPictureInformation } from \"./exif\"\n\nexport interface FSPicture{\n\tpath:string,\n\turl: string,\n\tinfo1: string,\n\tinfo2: string,\n\tinfo3: string,\n\tdate: Date | null\n}\n\nexport interface FSPictureListUpdateResult{\n\tsuccess: boolean;\n\tpicturecount: number;\n}\n\nlet CurrentImages: FSPicture[];\nlet CurrentImage: FSPicture;\n\nexport async function getPicture(Helper: GlobalHelper): Promise<FSPicture | null> {\n\ttry{\n\t\tif (CurrentImages.length === 0){\n\t\t\tawait updatePictureList(Helper);\n\t\t}\n\t\tif (CurrentImages.length !== 0){\n\t\t\tif (!CurrentImage){\n\t\t\t\tCurrentImage = CurrentImages[0];\n\t\t\t} else {\n\t\t\t\tif (CurrentImages.indexOf(CurrentImage) === CurrentImages.length - 1){\n\t\t\t\t\tCurrentImage = CurrentImages[0];\n\t\t\t\t} else {\n\t\t\t\t\tCurrentImage = CurrentImages[CurrentImages.indexOf(CurrentImage) + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fs.existsSync(CurrentImage.path) === true){\n\t\t\t\ttry {\n\t\t\t\t\tconst PicContent = fs.readFileSync(CurrentImage.path);\n\t\t\t\t\tconst PicContentB64 = PicContent.toString(\"base64\");\n\t\t\t\t\treturn { ...CurrentImage, url: `data:image/jpeg;base64,${PicContentB64}`};\n\t\t\t\t} catch (err) {\n\t\t\t\t\tHelper.ReportingError(null, `File not accessible: ${CurrentImage.path}`, \"Filesystem\", \"getPicture\", \"\", false);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tHelper.ReportingError(null, `File not accessible: ${CurrentImage.path}`, \"Filesystem\", \"getPicture\", \"\", false);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}catch(err){\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Filesystem\", \"getPicture\");\n\t\treturn null;\n\t}\n}\n\nexport async function updatePictureList(Helper: GlobalHelper): Promise<FSPictureListUpdateResult> {\n\ttry{\n\t\tCurrentImages = [];\n\t\t// Check if folder exists\n\t\tif (! fs.existsSync(Helper.Adapter.config.fs_path)){\n\t\t\tHelper.Adapter.log.error(`Folder ${Helper.Adapter.config.fs_path} does not exist`);\n\t\t\treturn { success: false, picturecount: 0 };\n\t\t}\n\t\t// Filter for JPEG or JPG files\n\t\tconst CurrentFileList = await getAllFiles(Helper, Helper.Adapter.config.fs_path);\n\t\tHelper.ReportingInfo(\"Info\", \"Filesystem\", `${CurrentFileList.length} total files found in folder ${Helper.Adapter.config.fs_path}`, {JSON: JSON.stringify(CurrentFileList.slice(0, 99))} );\n\t\tconst CurrentImageList = CurrentFileList.filter(function(file){\n\t\t\tif (path.extname(file).toLowerCase() === \".jpg\" || path.extname(file).toLowerCase() === \".jpeg\" || path.extname(file).toLowerCase() === \".png\"){\n\t\t\t\treturn file;\n\t\t\t}\n\t\t})\n\t\t// Checking orientation of pictures (landscape or portrait) if configured\n\t\tfor (const ImageIndex in CurrentImageList){\n\t\t\tif (Helper.Adapter.config.fs_format !== 0){\n\t\t\t\ttry {\n\t\t\t\t\tconst ImageSize = await imgsize.imageSize(CurrentImageList[ImageIndex]);\n\t\t\t\t\tif (ImageSize.width && ImageSize.height){\n\t\t\t\t\t\tif ((Helper.Adapter.config.fs_format === 1 && ImageSize.width > ImageSize.height) === true){\n\t\t\t\t\t\t\tif (Array.isArray(CurrentImages)){\n\t\t\t\t\t\t\t\tCurrentImages.push( {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null} );\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tCurrentImages = [ {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null} ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((Helper.Adapter.config.fs_format === 2 && ImageSize.height > ImageSize.width) === true){\n\t\t\t\t\t\t\tif (Array.isArray(CurrentImages)){\n\t\t\t\t\t\t\t\tCurrentImages.push( {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null} );\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tCurrentImages = [ {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null} ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tHelper.Adapter.log.error((err as Error).message);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif (Array.isArray(CurrentImages)){\n\t\t\t\t\tCurrentImages.push( {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null} );\n\t\t\t\t}else{\n\t\t\t\t\tCurrentImages = [ {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null} ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fillup picture information\n\t\tif (Array.isArray(CurrentImages)){\n\t\t\tif (CurrentImages.length > 0) {\n\t\t\t\tawait Promise.all(CurrentImages.map(async CurrentImage => {\n\t\t\t\t\tconst fileInfo = await getPictureInformation(Helper, CurrentImage.path);\n\t\t\t\t\tfileInfo?.info1 ? CurrentImage.info1 = fileInfo?.info1 : CurrentImage.info1 = \"\";\n\t\t\t\t\tfileInfo?.info2 ? CurrentImage.info2 = fileInfo?.info2 : CurrentImage.info2 = \"\";\n\t\t\t\t\tfileInfo?.info3 ? CurrentImage.info3 = fileInfo?.info3 : CurrentImage.info3 = \"\";\n\t\t\t\t\tfileInfo?.date ? CurrentImage.date = fileInfo?.date : CurrentImage.date = null;\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n\t\t// Sort\n\t\tswitch (Helper.Adapter.config.fs_order){\n\t\t\tcase 1:\n\t\t\t\t//Filename\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", \"Sort pictures by filename\");\n\t\t\t\tCurrentImages.sort((a,b) => (a.path > b.path) ? 1 : ((b.path > a.path) ? -1 : 0))\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t// Random order ?\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", \"Sort pictures random\");\n\t\t\t\t// See https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n\t\t\t\tfor (let i = CurrentImages.length - 1; i > 0; i--) {\n\t\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\t\t[CurrentImages[i], CurrentImages[j]] = [CurrentImages[j], CurrentImages[i]];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t//Takendate\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", \"Sort pictures by takendate\");\n\t\t\t\tCurrentImages.sort((a, b) => {\n\t\t\t\t\tif (a.date !== null && b.date !== null){\n\t\t\t\t\t\tif ( a.date < b.date ){\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( a.date > b.date ){\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t} )\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Images found ?\n\t\tif (!(CurrentImages.length > 0)){\n\t\t\tHelper.ReportingError(null, \"No pictures found in folder\", \"Filesystem\", \"updatePictureList\",\"\", false);\n\t\t\treturn { success: false, picturecount: 0 };\n\t\t}else{\n\t\t\tHelper.ReportingInfo(\"Info\", \"Filesystem\", `${CurrentImages.length} pictures found in folder ${Helper.Adapter.config.fs_path}`, {JSON: JSON.stringify(CurrentImages.slice(0, 99))} );\n\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", `Pictures: ${JSON.stringify(CurrentImages.slice(0, 99))}`)\n\t\t\treturn { success: true, picturecount: CurrentImages.length };\n\t\t}\n\t}catch(err) {\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Filesystem\", \"updatePictureList\");\n\t\treturn { success: false, picturecount: 0 };\n\t}\n}\n\nasync function getAllFiles(Helper: GlobalHelper, dirPath: string, _arrayOfFiles: string[] = []): Promise<string[]> {\n\t_arrayOfFiles = _arrayOfFiles || [];\n\ttry{\n\t\tconst files = await fs.readdirSync(dirPath);\n\t\tfiles.forEach(async function(file) {\n\t\t\ttry{\n\t\t\t\tif (fs.statSync(dirPath + \"/\" + file).isDirectory()) {\n\t\t\t\t\t_arrayOfFiles = await getAllFiles(Helper, dirPath + \"/\" + file, _arrayOfFiles);\n\t\t\t\t} else {\n\t\t\t\t\t_arrayOfFiles.push(path.join(dirPath, \"/\", file));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tHelper.ReportingError(err as Error, `Error scanning files: ${err} `, \"Filesystem\", \"getAllFiles\", \"\", false);\n\t\t\t}\n\t\t})\n\t} catch (err){\n\t\tHelper.ReportingError(err as Error, `Error scanning files: ${err} `, \"Filesystem\", \"getAllFiles\", \"\", false);\n\t}\n\treturn _arrayOfFiles;\n}"],
  "mappings": "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",
  "names": ["CurrentImage"]
}
