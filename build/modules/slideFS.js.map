{
  "version": 3,
  "sources": ["../../src/modules/slideFS.ts"],
  "sourcesContent": ["import { GlobalHelper } from \"./global-helper\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport * as imgsize from \"image-size\";\r\nimport { getPictureInformation } from \"./exif\"\r\nimport * as nominatim from \"./nominatim\"\r\n\r\nexport interface FSPicture{\r\n\tpath:string,\r\n\turl: string,\r\n\tinfo1: string,\r\n\tinfo2: string,\r\n\tinfo3: string,\r\n\tdate: Date | null,\r\n\tlatitude: number | null,\r\n\tlongitude: number | null,\r\n\tlocationInfos: nominatim.locationInfos | null\r\n}\r\n\r\nexport interface FSPictureListUpdateResult{\r\n\tsuccess: boolean;\r\n\tpicturecount: number;\r\n}\r\n\r\nlet CurrentImages: FSPicture[];\r\nlet CurrentImage: FSPicture;\r\n\r\nexport async function getPicture(Helper: GlobalHelper): Promise<FSPicture | null> {\r\n\ttry{\r\n\t\tif (CurrentImages.length === 0){\r\n\t\t\tawait updatePictureList(Helper);\r\n\t\t}\r\n\t\tif (CurrentImages.length !== 0){\r\n\t\t\tif (!CurrentImage){\r\n\t\t\t\tCurrentImage = CurrentImages[0];\r\n\t\t\t} else {\r\n\t\t\t\tif (CurrentImages.indexOf(CurrentImage) === CurrentImages.length - 1){\r\n\t\t\t\t\tCurrentImage = CurrentImages[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tCurrentImage = CurrentImages[CurrentImages.indexOf(CurrentImage) + 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (fs.existsSync(CurrentImage.path) === true){\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst PicContent = fs.readFileSync(CurrentImage.path);\r\n\t\t\t\t\tconst PicContentB64 = PicContent.toString(\"base64\");\r\n\t\t\t\t\treturn { ...CurrentImage, url: `data:image/jpeg;base64,${PicContentB64}`};\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tHelper.ReportingError(null, `File not accessible: ${CurrentImage.path}`, \"Filesystem\", \"getPicture\", \"\", false);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tHelper.ReportingError(null, `File not accessible: ${CurrentImage.path}`, \"Filesystem\", \"getPicture\", \"\", false);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}catch(err){\r\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Filesystem\", \"getPicture\");\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport async function updatePictureList(Helper: GlobalHelper): Promise<FSPictureListUpdateResult> {\r\n\ttry{\r\n\t\tCurrentImages = [];\r\n\t\t// Check if folder exists\r\n\t\tif (! fs.existsSync(Helper.Adapter.config.fs_path)){\r\n\t\t\tHelper.Adapter.log.error(`Folder ${Helper.Adapter.config.fs_path} does not exist`);\r\n\t\t\treturn { success: false, picturecount: 0 };\r\n\t\t}\r\n\t\t// Filter for JPEG or JPG files\r\n\t\tconst CurrentFileList = await getAllFiles(Helper, Helper.Adapter.config.fs_path);\r\n\t\tHelper.ReportingInfo(\"Info\", \"Filesystem\", `${CurrentFileList.length} total files found in folder ${Helper.Adapter.config.fs_path}`, {JSON: JSON.stringify(CurrentFileList.slice(0, 99))} );\r\n\t\tconst CurrentImageList = CurrentFileList.filter(function(file){\r\n\t\t\tif (path.extname(file).toLowerCase() === \".jpg\" || path.extname(file).toLowerCase() === \".jpeg\" || path.extname(file).toLowerCase() === \".png\"){\r\n\t\t\t\treturn file;\r\n\t\t\t}\r\n\t\t})\r\n\t\t// Checking orientation of pictures (landscape or portrait) if configured\r\n\t\tfor (const ImageIndex in CurrentImageList){\r\n\t\t\tif (Helper.Adapter.config.fs_format !== 0){\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst ImageSize = await imgsize.imageSize(CurrentImageList[ImageIndex]);\r\n\t\t\t\t\tif (ImageSize.width && ImageSize.height){\r\n\t\t\t\t\t\tif ((Helper.Adapter.config.fs_format === 1 && ImageSize.width > ImageSize.height) === true){\r\n\t\t\t\t\t\t\tif (Array.isArray(CurrentImages)){\r\n\t\t\t\t\t\t\t\tCurrentImages.push( {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null, latitude: null, longitude: null, locationInfos: null} );\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tCurrentImages = [ {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null, latitude: null, longitude: null, locationInfos: null} ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ((Helper.Adapter.config.fs_format === 2 && ImageSize.height > ImageSize.width) === true){\r\n\t\t\t\t\t\t\tif (Array.isArray(CurrentImages)){\r\n\t\t\t\t\t\t\t\tCurrentImages.push( {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null, latitude: null, longitude: null, locationInfos: null} );\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tCurrentImages = [ {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null, latitude: null, longitude: null, locationInfos: null} ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tHelper.Adapter.log.error((err as Error).message);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif (Array.isArray(CurrentImages)){\r\n\t\t\t\t\tCurrentImages.push( {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null, latitude: null, longitude: null, locationInfos: null} );\r\n\t\t\t\t}else{\r\n\t\t\t\t\tCurrentImages = [ {path: CurrentImageList[ImageIndex], url: \"\", info1: \"\", info2: \"\", info3: \"\", date: null, latitude: null, longitude: null, locationInfos: null} ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fillup picture information\r\n\t\tif (Array.isArray(CurrentImages)){\r\n\t\t\tif (CurrentImages.length > 0) {\r\n\t\t\t\tawait Promise.all(CurrentImages.map(async CurrentImage => {\r\n\t\t\t\t\tconst fileInfo = await getPictureInformation(Helper, CurrentImage.path);\r\n\t\t\t\t\tfileInfo?.info1 ? CurrentImage.info1 = fileInfo?.info1 : CurrentImage.info1 = \"\";\r\n\t\t\t\t\tfileInfo?.info2 ? CurrentImage.info2 = fileInfo?.info2 : CurrentImage.info2 = \"\";\r\n\t\t\t\t\tfileInfo?.info3 ? CurrentImage.info3 = fileInfo?.info3 : CurrentImage.info3 = \"\";\r\n\t\t\t\t\tfileInfo?.date ? CurrentImage.date = fileInfo?.date : CurrentImage.date = null;\r\n\t\t\t\t\tfileInfo?.latitude ? CurrentImage.latitude = fileInfo?.latitude : CurrentImage.latitude = null;\r\n\t\t\t\t\tfileInfo?.longitude ? CurrentImage.longitude = fileInfo?.longitude : CurrentImage.longitude = null;\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sort\r\n\t\tswitch (Helper.Adapter.config.fs_order){\r\n\t\t\tcase 1:\r\n\t\t\t\t//Filename\r\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", \"Sort pictures by filename\");\r\n\t\t\t\tCurrentImages.sort((a,b) => (a.path > b.path) ? 1 : ((b.path > a.path) ? -1 : 0))\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\t// Random order ?\r\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", \"Sort pictures random\");\r\n\t\t\t\t// See https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n\t\t\t\tfor (let i = CurrentImages.length - 1; i > 0; i--) {\r\n\t\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t\t\t[CurrentImages[i], CurrentImages[j]] = [CurrentImages[j], CurrentImages[i]];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t//Takendate\r\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", \"Sort pictures by takendate\");\r\n\t\t\t\tCurrentImages.sort((a, b) => {\r\n\t\t\t\t\tif (a.date !== null && b.date !== null){\r\n\t\t\t\t\t\tif ( a.date < b.date ){\r\n\t\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( a.date > b.date ){\r\n\t\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} )\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// Images found ?\r\n\t\tif (!(CurrentImages.length > 0)){\r\n\t\t\tHelper.ReportingError(null, \"No pictures found in folder\", \"Filesystem\", \"updatePictureList\",\"\", false);\r\n\t\t\treturn { success: false, picturecount: 0 };\r\n\t\t}else{\r\n\t\t\tHelper.ReportingInfo(\"Info\", \"Filesystem\", `${CurrentImages.length} pictures found in folder ${Helper.Adapter.config.fs_path}`, {JSON: JSON.stringify(CurrentImages.slice(0, 99))} );\r\n\t\t\tHelper.ReportingInfo(\"Debug\", \"Filesystem\", `Pictures: ${JSON.stringify(CurrentImages.slice(0, 99))}`)\r\n\t\t\treturn { success: true, picturecount: CurrentImages.length };\r\n\t\t}\r\n\t}catch(err) {\r\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Filesystem\", \"updatePictureList\");\r\n\t\treturn { success: false, picturecount: 0 };\r\n\t}\r\n}\r\n\r\nasync function getAllFiles(Helper: GlobalHelper, dirPath: string, _arrayOfFiles: string[] = []): Promise<string[]> {\r\n\t_arrayOfFiles = _arrayOfFiles || [];\r\n\ttry{\r\n\t\tconst files = await fs.readdirSync(dirPath);\r\n\t\tfiles.forEach(async function(file) {\r\n\t\t\ttry{\r\n\t\t\t\tif (fs.statSync(dirPath + \"/\" + file).isDirectory()) {\r\n\t\t\t\t\t_arrayOfFiles = await getAllFiles(Helper, dirPath + \"/\" + file, _arrayOfFiles);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_arrayOfFiles.push(path.join(dirPath, \"/\", file));\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tHelper.ReportingError(err as Error, `Error scanning files: ${err} `, \"Filesystem\", \"getAllFiles\", \"\", false);\r\n\t\t\t}\r\n\t\t})\r\n\t} catch (err){\r\n\t\tHelper.ReportingError(err as Error, `Error scanning files: ${err} `, \"Filesystem\", \"getAllFiles\", \"\", false);\r\n\t}\r\n\treturn _arrayOfFiles;\r\n}"],
  "mappings": "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",
  "names": []
}
